package Controller;

import java.net.URL;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import Class.Etudiant;
import Connection.ConnectionMySQL;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Label;

import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.util.converter.FloatStringConverter;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellEditEvent;

public class NoteEtudiantController implements Initializable {
	@FXML
	private Label nomLabel;
	@FXML
	private Label prenomLabel;
	@FXML
	private ComboBox matiereChoix;
	@FXML
	private TableView table;
	@FXML
	private TableColumn id;
	@FXML
	private TableColumn nom;
	@FXML
	private TableColumn prenom;
	@FXML
	private TableColumn matiere;
	@FXML
	private TableColumn tp;
	@FXML
	private TableColumn cc;
	@FXML
	private TableColumn exam;
	
	@FXML
	public void afficher(ActionEvent event) {
		// TODO Autogenerated
		table();
	}
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
					ConnectionMySQL x = new ConnectionMySQL();
					try {
						matiereChoix.getItems().addAll(x.matChoiceBox());
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					table.setEditable(true);
					id. setCellValueFactory(new PropertyValueFactory<Etudiant, Integer>("id"));
					nom.setCellValueFactory(new PropertyValueFactory<Etudiant, String >("nom"));
					prenom.setCellValueFactory(new PropertyValueFactory<Etudiant, String>("prenom"));
					matiere.setCellValueFactory(new PropertyValueFactory<Etudiant, String>("matiere"));
					tp.setCellValueFactory(new PropertyValueFactory<Etudiant, Float>("tp"));
					tp.setCellFactory(TextFieldTableCell.forTableColumn(new FloatStringConverter()));	
					tp.setOnEditCommit(new EventHandler<CellEditEvent<Etudiant, Float>>(){
						@Override
						public void handle(CellEditEvent<Etudiant, Float> event) {
							// TODO Auto-generated method stub
							Etudiant et = event.getRowValue();
							if(event.getNewValue()<0 || event.getNewValue()>20) {
								JOptionPane.showMessageDialog(null, "Valeurs invalides ");
								table();
							}else {
								x.modifiertp(et.getId(), et.getMatiere(), event.getNewValue());
								x.calculeMatiere(et.getId(), et.getMatiere());
								x.calculeModule(et.getId(),et.getMatiere());
								x.calculeGenerale(et.getId());
								table();
							}
						}
					});
					cc.setCellValueFactory(new PropertyValueFactory<Etudiant, Float>("cc"));
					cc.setCellFactory(TextFieldTableCell.forTableColumn(new FloatStringConverter()));
					cc.setOnEditCommit(new EventHandler<CellEditEvent<Etudiant, Float>>(){
						@Override
						public void handle(CellEditEvent<Etudiant, Float> event) {
							// TODO Auto-generated method stub
							Etudiant et = event.getRowValue();
							if(event.getNewValue()<0 || event.getNewValue()>20) {
								JOptionPane.showMessageDialog(null, "Valeurs invalides ");
								table();
							}else {
								x.modifiercc(et.getId(), et.getMatiere(), event.getNewValue());
								x.calculeMatiere(et.getId(), et.getMatiere());
								x.calculeModule(et.getId(),et.getMatiere());
								x.calculeGenerale(et.getId());
								table();
							}
							
						}
					});
					exam.setCellValueFactory(new PropertyValueFactory<Etudiant, Float>("examen"));
					exam.setCellFactory(TextFieldTableCell.forTableColumn(new FloatStringConverter()));
					exam.setOnEditCommit(new EventHandler<CellEditEvent<Etudiant, Float>>(){
						@Override
						public void handle(CellEditEvent<Etudiant, Float> event) {
							// TODO Auto-generated method stub
							Etudiant et = event.getRowValue();
							if(event.getNewValue()<0 || event.getNewValue()>20) {
								JOptionPane.showMessageDialog(null, "Valeurs invalides ");
								table();
							}else {
								x.modifierexam(et.getId(), et.getMatiere(), event.getNewValue());
								x.calculeMatiere(et.getId(), et.getMatiere());
								x.calculeModule(et.getId(),et.getMatiere());
								x.calculeGenerale(et.getId());
								table();
							}
							
						}
					});
				
	}
	public void table() {
		table.getItems().clear();
		ConnectionMySQL x= new ConnectionMySQL();
		ObservableList<Etudiant> y = x.listeEtudiant2(matiereChoix.getValue().toString());
		table.setItems(y);
	}

}